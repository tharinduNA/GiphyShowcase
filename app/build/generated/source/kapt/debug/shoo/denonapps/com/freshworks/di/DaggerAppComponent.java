// Generated by Dagger (https://dagger.dev).
package shoo.denonapps.com.freshworks.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerDialogFragment_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;
import shoo.denonapps.com.freshworks.FreshWorksApp;
import shoo.denonapps.com.freshworks.database.AppDatabase;
import shoo.denonapps.com.freshworks.datasource.GiphyFavDataSource;
import shoo.denonapps.com.freshworks.datasource.GiphyRemoteDataSource;
import shoo.denonapps.com.freshworks.datasource.GiphyRemoteDataSource_Factory;
import shoo.denonapps.com.freshworks.di.module.ActivityModule_ContributeBaseActivity;
import shoo.denonapps.com.freshworks.di.module.DBModule;
import shoo.denonapps.com.freshworks.di.module.DBModule_ProvideUserDataSourceFactory;
import shoo.denonapps.com.freshworks.di.module.DBModule_ProvidesAppDatabaseFactory;
import shoo.denonapps.com.freshworks.di.module.FragmentModule_ContributeDashboardFragment;
import shoo.denonapps.com.freshworks.di.module.FragmentModule_ContributeHomeFragment;
import shoo.denonapps.com.freshworks.di.module.FragmentModule_ContributeLoadingFragment;
import shoo.denonapps.com.freshworks.di.module.NetworkModule;
import shoo.denonapps.com.freshworks.di.module.NetworkModule_ProvideGiphyRetrofitServiceFactory;
import shoo.denonapps.com.freshworks.di.module.NetworkModule_ProvideGsonFactory;
import shoo.denonapps.com.freshworks.di.module.NetworkModule_ProvideRetrofitFactory;
import shoo.denonapps.com.freshworks.service.GiphyService;
import shoo.denonapps.com.freshworks.ui.base.MainActivity;
import shoo.denonapps.com.freshworks.ui.favourite.FavouriteFragment;
import shoo.denonapps.com.freshworks.ui.favourite.FavouriteFragment_MembersInjector;
import shoo.denonapps.com.freshworks.ui.favourite.FavouriteViewModel;
import shoo.denonapps.com.freshworks.ui.favourite.FavouriteViewModel_Factory;
import shoo.denonapps.com.freshworks.ui.home.HomeFragment;
import shoo.denonapps.com.freshworks.ui.home.HomeFragment_MembersInjector;
import shoo.denonapps.com.freshworks.ui.home.HomeViewModel;
import shoo.denonapps.com.freshworks.ui.home.HomeViewModel_Factory;
import shoo.denonapps.com.freshworks.ui.loading.LoadingFragment;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DBModule dBModule;

  private final Application application;

  private Provider<ActivityModule_ContributeBaseActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent.Factory> favouriteFragmentSubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent.Factory> loadingFragmentSubcomponentFactoryProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<GiphyService> provideGiphyRetrofitServiceProvider;

  private Provider<GiphyRemoteDataSource> giphyRemoteDataSourceProvider;

  private Provider<Application> applicationProvider;

  private Provider<AppDatabase> providesAppDatabaseProvider;

  private Provider<GiphyFavDataSource> provideUserDataSourceProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<FavouriteViewModel> favouriteViewModelProvider;

  private DaggerAppComponent(DBModule dBModuleParam, NetworkModule networkModuleParam,
      Application applicationParam) {
    this.dBModule = dBModuleParam;
    this.application = applicationParam;
    initialize(dBModuleParam, networkModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(FavouriteFragment.class, (Provider) favouriteFragmentSubcomponentFactoryProvider).put(LoadingFragment.class, (Provider) loadingFragmentSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(HomeViewModel.class, (Provider) homeViewModelProvider).put(FavouriteViewModel.class, (Provider) favouriteViewModelProvider).build();
  }

  private ViewModelProviderFactory viewModelProviderFactory() {
    return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
  }

  private AppDatabase appDatabase() {
    return DBModule_ProvidesAppDatabaseFactory.providesAppDatabase(dBModule, application);
  }

  private GiphyFavDataSource giphyFavDataSource() {
    return DBModule_ProvideUserDataSourceFactory.provideUserDataSource(dBModule, appDatabase());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DBModule dBModuleParam, final NetworkModule networkModuleParam,
      final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeBaseActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeBaseActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.homeFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory get() {
        return new HomeFragmentSubcomponentFactory();
      }
    };
    this.favouriteFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent.Factory get(
          ) {
        return new FavouriteFragmentSubcomponentFactory();
      }
    };
    this.loadingFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent.Factory get() {
        return new LoadingFragmentSubcomponentFactory();
      }
    };
    this.provideGsonProvider = NetworkModule_ProvideGsonFactory.create(networkModuleParam);
    this.provideRetrofitProvider = NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideGsonProvider);
    this.provideGiphyRetrofitServiceProvider = NetworkModule_ProvideGiphyRetrofitServiceFactory.create(networkModuleParam, provideRetrofitProvider);
    this.giphyRemoteDataSourceProvider = GiphyRemoteDataSource_Factory.create(provideGiphyRetrofitServiceProvider);
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providesAppDatabaseProvider = DBModule_ProvidesAppDatabaseFactory.create(dBModuleParam, applicationProvider);
    this.provideUserDataSourceProvider = DBModule_ProvideUserDataSourceFactory.create(dBModuleParam, providesAppDatabaseProvider);
    this.homeViewModelProvider = HomeViewModel_Factory.create((Provider) giphyRemoteDataSourceProvider, provideUserDataSourceProvider);
    this.favouriteViewModelProvider = FavouriteViewModel_Factory.create(provideUserDataSourceProvider);
  }

  @Override
  public void inject(FreshWorksApp arg0) {
    injectFreshWorksApp(arg0);
  }

  private FreshWorksApp injectFreshWorksApp(FreshWorksApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new DBModule(), new NetworkModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_ContributeBaseActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeBaseActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_ContributeBaseActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class HomeFragmentSubcomponentFactory implements FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent create(
        HomeFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeFragmentSubcomponentImpl(arg0);
    }
  }

  private final class HomeFragmentSubcomponentImpl implements FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent {
    private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

    }

    @Override
    public void inject(HomeFragment arg0) {
      injectHomeFragment(arg0);
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      HomeFragment_MembersInjector.injectViewModelProvider(instance, DaggerAppComponent.this.viewModelProviderFactory());
      HomeFragment_MembersInjector.injectGiphyFavDataSource(instance, DaggerAppComponent.this.giphyFavDataSource());
      return instance;
    }
  }

  private final class FavouriteFragmentSubcomponentFactory implements FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent create(
        FavouriteFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new FavouriteFragmentSubcomponentImpl(arg0);
    }
  }

  private final class FavouriteFragmentSubcomponentImpl implements FragmentModule_ContributeDashboardFragment.FavouriteFragmentSubcomponent {
    private FavouriteFragmentSubcomponentImpl(FavouriteFragment arg0) {

    }

    @Override
    public void inject(FavouriteFragment arg0) {
      injectFavouriteFragment(arg0);
    }

    private FavouriteFragment injectFavouriteFragment(FavouriteFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      FavouriteFragment_MembersInjector.injectViewModelProvider(instance, DaggerAppComponent.this.viewModelProviderFactory());
      FavouriteFragment_MembersInjector.injectGiphyFavDataSource(instance, DaggerAppComponent.this.giphyFavDataSource());
      return instance;
    }
  }

  private final class LoadingFragmentSubcomponentFactory implements FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent create(
        LoadingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoadingFragmentSubcomponentImpl(arg0);
    }
  }

  private final class LoadingFragmentSubcomponentImpl implements FragmentModule_ContributeLoadingFragment.LoadingFragmentSubcomponent {
    private LoadingFragmentSubcomponentImpl(LoadingFragment arg0) {

    }

    @Override
    public void inject(LoadingFragment arg0) {
      injectLoadingFragment(arg0);
    }

    private LoadingFragment injectLoadingFragment(LoadingFragment instance) {
      DaggerDialogFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
