// Generated by Dagger (https://dagger.dev).
package shoo.denonapps.com.freshworks.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import shoo.denonapps.com.freshworks.database.AppDatabase;
import shoo.denonapps.com.freshworks.datasource.GiphyFavDataSource;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DBModule_ProvideUserDataSourceFactory implements Factory<GiphyFavDataSource> {
  private final DBModule module;

  private final Provider<AppDatabase> databaseProvider;

  public DBModule_ProvideUserDataSourceFactory(DBModule module,
      Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public GiphyFavDataSource get() {
    return provideUserDataSource(module, databaseProvider.get());
  }

  public static DBModule_ProvideUserDataSourceFactory create(DBModule module,
      Provider<AppDatabase> databaseProvider) {
    return new DBModule_ProvideUserDataSourceFactory(module, databaseProvider);
  }

  public static GiphyFavDataSource provideUserDataSource(DBModule instance, AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserDataSource(database));
  }
}
